#!/usr/bin/env bash

set -e

git --version

# Prompt immediately for sudo, and keep it alive while the install script runs
sudo -v
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

if hash brew 2>/dev/null; then
    echo "Homebrew already installed."
else
    echo "Installing Homebrew..."
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
fi

if hash jq 2>/dev/null; then
    echo "jq already installed."
else
    echo "Installing jq..."
    brew install jq
fi

if hash chezmoi 2>/dev/null; then
    echo "chezmoi already installed."
else
    echo "Installing chezmoi..."
    brew install chezmoi
fi

if hash mas 2>/dev/null; then
    echo "mas already installed."
else
    echo "Installing mas..."
    brew install mas
fi

if hash op 2>/dev/null; then
    echo "1Password CLI already installed."
else
    echo "Installing 1Password CLI..."
    brew cask install 1password-cli
fi

while ! op list vaults --account="my" > /dev/null 2>&1; do
    # Check if the 1Password account is already known to the CLI, and if so use
    # the "short form" sign-in syntax. This prevents the need to re-enter the
    # secret key if it is already known.
    if cat ~/.op/config | jq --exit-status '.accounts | .[] | select(.shorthand == "my")' > /dev/null; then
        eval $(op signin "my")
    else
        while [ -z "$OP_EMAIL" ]; do
            echo -n "1Password email address: "
            read OP_EMAIL
        done

        while [ -z "$OP_KEY" ]; do
            echo -n "1Password secret key: "
            read OP_KEY
        done

        eval $(op signin my "$OP_EMAIL" "$OP_KEY")
    fi
done

sudo spctl --add "$(which op)"

DOTFILES_PUBLIC_PATH="$HOME/grit/github.com/danilvpetrov/dotfiles"
DOTFILES_PUBLIC_REPO="github.com/danilvpetrov/dotfiles"
DOTFILES_BRANCH="main"

if [[ -d "$DOTFILES_PUBLIC_PATH" ]]; then
    echo "Pulling public dotfiles..."
    pushd "$DOTFILES_PUBLIC_PATH" > /dev/null
    git pull --ff-only
    popd > /dev/null
else
    echo "Cloning public dotfiles"
    git clone \
        --branch "$DOTFILES_BRANCH" \
        --single-branch "https://${DOTFILES_PUBLIC_REPO}.git" \
        "$DOTFILES_PUBLIC_PATH"
fi

if [[ -e "$HOME/dotfiles" ]]; then
    echo "Public dotfiles shortcut directory already exists."
else
    ln -s "$DOTFILES_PUBLIC_PATH" "$HOME/dotfiles"
fi

if mas account; then
    echo "App store sign in detected."
else
    op get item "Apple ID" | jq -r '.details.fields[] | select (.designation == "password") | .value' | tr -d '\n' | pbcopy
    echo "Sign in to the app store first. Password has been copied to the clipboard."
    mas open
    open "x-apple.systempreferences:com.apple.preferences.AppleIDPrefPane"
    exit 1
fi

# Run chezmoi for the public dotfiles.
CHEZMOI_SOURCE_PATH="${DOTFILES_PUBLIC_PATH}"/src
CHEZMOI_DESTINATION_PATH="${HOME}"

chezmoi apply --verbose \
                --source "$CHEZMOI_SOURCE_PATH" \
                --destination "$CHEZMOI_DESTINATION_PATH"


DOTFILES_PRIVATE_PATH="$HOME/grit/github.com/danilvpetrov/dotfiles-private"

# Run chezmoi for the private dotfiles.
CHEZMOI_SOURCE_PATH="${DOTFILES_PRIVATE_PATH}"/src

chezmoi apply --verbose \
                --source "$CHEZMOI_SOURCE_PATH" \
                --destination "$CHEZMOI_DESTINATION_PATH"

echo "Done. System must be restarted for some changes to take effect."
