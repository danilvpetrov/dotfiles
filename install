#!/usr/bin/env bash

set -e

git --version

# Prompt immediately for sudo, and keep it alive while the install script runs
sudo -v
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

if hash brew 2>/dev/null; then
    echo "Homebrew already installed."
else
    echo "Installing Homebrew..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    eval "$(/opt/homebrew/bin/brew shellenv)"
fi

if hash jq 2>/dev/null; then
    echo "jq already installed."
else
    echo "Installing jq..."
    brew install jq
fi

if hash chezmoi 2>/dev/null; then
    echo "chezmoi already installed."
else
    echo "Installing chezmoi..."
    brew install chezmoi
fi

if hash mas 2>/dev/null; then
    echo "mas already installed."
else
    echo "Installing mas..."
    brew install mas
fi

if [[ -d /Applications/1Password.app ]]; then
    echo "1Password already installed."
else
    echo "Installing 1Password..."
    brew install --cask 1password
fi

if hash op &>/dev/null; then
    echo "1Password CLI already installed."
else
    echo "Installing 1Password CLI..."
    brew install --cask 1password-cli
fi

echo "First, add your personal 1Password account to the app, then enable the following options in the preferences:"
echo
echo "    - Developer > Command-Line Interface (CLI) > Connect with 1Password CLI"
echo

open "/Applications/1Password.app"

read -p "Have you configured the specified options? [yn] " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
    echo "Unable to continue without configuring 1Password."
    exit 1
fi

op item get --account=my --vault=Personal "Apple ID" --fields=password | tr -d '\n' | pbcopy
echo "Sign in to the app store first. Password has been copied to the clipboard."
mas open
open "x-apple.systempreferences:com.apple.preferences.AppleIDPrefPane"

DOTFILES_PUBLIC_PATH="$HOME/grit/github.com/danilvpetrov/dotfiles"
DOTFILES_PUBLIC_REPO="https://danilvpetrov@github.com/danilvpetrov/dotfiles.git"
DOTFILES_BRANCH="main"

if [[ -d "$DOTFILES_PUBLIC_PATH" ]]; then
    echo "Pulling public dotfiles..."
    pushd "$DOTFILES_PUBLIC_PATH" > /dev/null
    git pull --ff-only
    popd > /dev/null
else
    echo "Cloning public dotfiles"
    git clone \
        --branch "$DOTFILES_BRANCH" \
        --single-branch "$DOTFILES_PUBLIC_REPO" \
        "$DOTFILES_PUBLIC_PATH"
fi

if [[ -e "$HOME/dotfiles" ]]; then
    echo "Public dotfiles shortcut directory already exists."
else
    ln -s "$DOTFILES_PUBLIC_PATH" "$HOME/dotfiles"
fi

if [[ -e "$HOME/icloud" ]]; then
    echo "iCloud shortcut directory already exists."
else
    ln -s "$HOME/Library/Mobile Documents/com~apple~CloudDocs" "$HOME/icloud"
fi

# Run chezmoi for the public dotfiles.
CHEZMOI_SOURCE_PATH="${DOTFILES_PUBLIC_PATH}"/src
CHEZMOI_DESTINATION_PATH="${HOME}"

chezmoi apply --verbose \
                --source "$CHEZMOI_SOURCE_PATH" \
                --destination "$CHEZMOI_DESTINATION_PATH"

echo "Done. System must be restarted for some changes to take effect."
