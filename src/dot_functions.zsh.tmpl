function git-slug () {
  if ! URL="$(git config --get remote.origin.url)"; then
    return 1
  fi

  if [[ "$URL" =~ [:/]([^/:]+/[^/]+)\.git$ ]]; then
    echo "${match[1]}"
  elif [[ "$1" == '--fuzzy' ]]; then
    echo "???/$(basename "$(pwd)")"
  else
    return 1
  fi
}

function source-if-exists () {
  [ -f "$1" ] && source "$1"
}

function iterm2_print_user_vars () {
  iterm2_set_user_var gitSlug "$(git-slug)"
}

function gosrcfind () {
  grep --color=always -iIRn "$1" "$(go env GOROOT)"
}

function cwd () {
  pwd | tr -d '\n' | pbcopy
}

function mkcdir()
{
   mkdir -p -- "$1" && cd -P -- "$1"
}

{{ if eq .chezmoi.os "darwin" }}
# this function loads the key mappings and installs the script that is
# executed on every login. The key mappings include the following:
#
# 1. CapsLock to Escape key
# 2. Swap right control and option keys.
function remapkbr_on() {
  mkdir -p ${HOME}/Library/LaunchAgents
  file=${HOME}/Library/LaunchAgents/user.keyboard.keyremapping.plist

  # the command below can fail with Unload failed: 5: Input/output error, hence is
  # the error override.
  launchctl unload $file 2>/dev/null | true
  rm -rf $file

  cat <<-EOF > $file
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>Label</key>
    <string>user.keyboard.keyremapping</string>
    <key>ProgramArguments</key>
    <array>
      <string>sh</string>
      <string>-c</string>
      <string>hidutil property --set &#39;{&#34;UserKeyMapping&#34;:[{&#34;HIDKeyboardModifierMappingSrc&#34;:0x700000039,&#34;HIDKeyboardModifierMappingDst&#34;:0x700000029}, {&#34;HIDKeyboardModifierMappingSrc&#34;:0x7000000e6,&#34;HIDKeyboardModifierMappingDst&#34;:0x7000000e4}, {&#34;HIDKeyboardModifierMappingSrc&#34;:0x7000000e4,&#34;HIDKeyboardModifierMappingDst&#34;:0x7000000e6}]}&#39;</string>
    </array>
    <key>RunAtLoad</key>
    <true/>
    <key>StandardErrorPath</key>
    <string>${HOME}/kbr-remapping-error.log</string>
  </dict>
</plist>

EOF

  chmod 0644 $file
  launchctl load $file
  launchctl start $file
}

# this function undoes any keyboard mapping done by remapkbr_on function. It also
# uninstalls the launchclt agent that runs remapping on the user's login.
function remapkbr_off() {
  hidutil property --set '{"UserKeyMapping":[]}'

  file=${HOME}/Library/LaunchAgents/user.keyboard.keyremapping.plist
  # the commands below can fail with Unload failed: 5: Input/output error, hence is
  # the error override.
  launchctl stop $file 2>/dev/null | true
  launchctl unload $file 2>/dev/null | true
  rm -f $file
}
{{- end }}

# This function exports the paths to platform.io executables in the current terminal session.
function platformioenv() {
  export PATH="${HOME}/.platformio/penv/bin:${HOME}/.platformio/penv:${HOME}/.platformio/python3/bin:$PATH"
}

function platformioproj() {
  pio project init \
    --ide "vscode" \
    --project-option "framework = espidf" \
    --project-option "platform = espressif32" \
    --project-option "monitor_speed = 115200" \
    "$@"
}

function aria() {
  aria2c \
    --summary-interval=0 \
    --seed-time=0 \
    --file-allocation=none \
    "$@"
}
